/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Badword API
 * The badword API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreateUserDto,
  UpdateUserDto
} from '.././model'



export const userControllerCreate = (
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `http://localhost:3000/user`,
      createUserDto,options
    );
  }



export const getUserControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userControllerCreate>>, TError,{data: CreateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userControllerCreate>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  userControllerCreate(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof userControllerCreate>>>
    export type UserControllerCreateMutationBody = CreateUserDto
    export type UserControllerCreateMutationError = AxiosError<unknown>

    export const useUserControllerCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getUserControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const userControllerUpdate = (
    id: string,
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `http://localhost:3000/user/${id}`,
      updateUserDto,options
    );
  }



export const getUserControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userControllerUpdate>>, {id: string;data: UpdateUserDto}> = (props) => {
          const {id,data} = props ?? {};

          return  userControllerUpdate(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof userControllerUpdate>>>
    export type UserControllerUpdateMutationBody = UpdateUserDto
    export type UserControllerUpdateMutationError = AxiosError<unknown>

    export const useUserControllerUpdate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getUserControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const userControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `http://localhost:3000/user/${id}`,options
    );
  }



export const getUserControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  userControllerRemove(id,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UserControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof userControllerRemove>>>
    
    export type UserControllerRemoveMutationError = AxiosError<unknown>

    export const useUserControllerRemove = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getUserControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    