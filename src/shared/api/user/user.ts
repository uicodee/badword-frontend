/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  User
} from '.././model'
import { createInstance } from '.././http/index';
import type { ErrorType } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get a user's information
 * @summary Get current user's information
 */
export const getMeUserGetMeGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<User>(
      {url: `http://localhost:15400/user/get-me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeUserGetMeGetQueryKey = () => {
    return [`http://localhost:15400/user/get-me`] as const;
    }

    
export const getGetMeUserGetMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getMeUserGetMeGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeUserGetMeGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeUserGetMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeUserGetMeGet>>> = ({ signal }) => getMeUserGetMeGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeUserGetMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMeUserGetMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMeUserGetMeGet>>>
export type GetMeUserGetMeGetQueryError = ErrorType<unknown>

/**
 * @summary Get current user's information
 */
export const useGetMeUserGetMeGet = <TData = Awaited<ReturnType<typeof getMeUserGetMeGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeUserGetMeGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMeUserGetMeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



