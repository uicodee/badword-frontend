/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions
} from '@tanstack/react-query'
import type {
  BodyLoginUserLoginPost,
  HTTPValidationError,
  Token
} from '.././model'
import { createInstance } from '.././http/index';
import type { ErrorType, BodyType } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Login user
 * @summary Login user by email and password
 */
export const loginUserLoginPost = (
    bodyLoginUserLoginPost: BodyType<BodyLoginUserLoginPost>,
 options?: SecondParameter<typeof createInstance>,) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyLoginUserLoginPost.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyLoginUserLoginPost.grant_type)
 }
formUrlEncoded.append('username', bodyLoginUserLoginPost.username)
formUrlEncoded.append('password', bodyLoginUserLoginPost.password)
if(bodyLoginUserLoginPost.scope !== undefined) {
 formUrlEncoded.append('scope', bodyLoginUserLoginPost.scope)
 }
if(bodyLoginUserLoginPost.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyLoginUserLoginPost.client_id)
 }
if(bodyLoginUserLoginPost.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyLoginUserLoginPost.client_secret)
 }

      return createInstance<Token>(
      {url: `https://api.badword.uz/login`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      options);
    }
  


export const getLoginUserLoginPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUserLoginPost>>, TError,{data: BodyType<BodyLoginUserLoginPost>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof loginUserLoginPost>>, TError,{data: BodyType<BodyLoginUserLoginPost>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUserLoginPost>>, {data: BodyType<BodyLoginUserLoginPost>}> = (props) => {
          const {data} = props ?? {};

          return  loginUserLoginPost(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LoginUserLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginUserLoginPost>>>
    export type LoginUserLoginPostMutationBody = BodyType<BodyLoginUserLoginPost>
    export type LoginUserLoginPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Login user by email and password
 */
export const useLoginUserLoginPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUserLoginPost>>, TError,{data: BodyType<BodyLoginUserLoginPost>}, TContext>, request?: SecondParameter<typeof createInstance>}
) => {

      const mutationOptions = getLoginUserLoginPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    